[설치]
npm i -g @nestjs/cli
-------------------------------------------------------------------------------------

[nest 프로젝트 생성]
nest new 폴더명
-------------------------------------------------------------------------------------

src 폴더 안에 대부분의 코드를 작성 할 것이다!
-------------------------------------------------------------------------------------

[nodemon 같은 기능  hot reload]
npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack

[webpack-hmr.config.js 파일 생성]
const nodeExternals = require('webpack-node-externals');
const { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');

module.exports = function (options, webpack) {
  return {
    ...options,
    entry: ['webpack/hot/poll?100', options.entry],
    externals: [
      nodeExternals({
        allowlist: ['webpack/hot/poll?100'],
      }),
    ],
    plugins: [
      ...options.plugins,
      new webpack.HotModuleReplacementPlugin(),
      new webpack.WatchIgnorePlugin({
        paths: [/\.js$/, /\.d\.ts$/],
      }),
      new RunScriptWebpackPlugin({ name: options.output.filename, autoRestart: false }),
    ],
  };
};

[src/main.ts 수정]
declare const module: any

if(module.hot) {
    module.hot.accept();
    module.hot.dispose(() => app.close());
}

[package.json 수정]
"start:dev": "nest start --watch --webpackPath webpack-hmr.config.js",
-------------------------------------------------------------------------------------

앞으로 npm run start:dev 로 하면 된다!
-------------------------------------------------------------------------------------

express 에서는 app.js 에 router를 추가하는 방식이지만
nest 에서는 module 위주의 방식

controllers : router라고 보면된다.
@Get() : GET /
------------------------------------------------------------------------------------

// 공통주소
@Controller('abc'){
    // 세부주소
    @Get() : GET /abc
}
--------------------------------------------------------------------------------

@ : annotation, decorator
이걸 붙이면 nest에서 알아서 해준다.
-> IoC (Inversion of Control) : 제어의 역전

개발자 입장에서 거부감이 있을 수도 있다.(블랙박스 : 동작 과정을 볼 수 없다.)
--------------------------------------------------------------------------------

req, res 쓰는게 안좋은 이유 : jest로 테스트할때 목킹해야한다.
Nest에는 return 만 하면 되니 함수만 목킹하면 된다.
------------------------------------------------------------------------------------

dotenv

dotenv 설치 해서 사용 할 수도있지만,
nest 에서는 module방식이므로 세팅을 더 해야한다.

[설치]
npm i --save @nestjs/config

[app.module.ts 수정]
import { ConfigModule } from '@nestjs/config'

imports에다가 ConfigModule.forRoot() 반드시 

설정이 있는 애들
forRoot()
forFeature()
...
------------------------------------------------------------------------------------
[ConfigService]
import { ConfigService } from '@nestjs/config'

[app.module.ts에서]
providers: [ConfigService] 추가

[app.service.ts에서]
import { ConfigService } from '@nestjs/config'

constructor(private readonly configService: ConfigService);
---------------------------------------------------------------------------------

[Logger Middleware]
/src/middlewares/logger.middleware.ts

import { Injectable, NestMiddleware } from '@nestjs/common'

@Injectable()
export class LoggerMiddleware implements NestMiddleware {
  private logger = new Logger('HTTP');

  use(request: Request, response: Response, next: NextFunction): void {
    const { ip, method, originalUrl } = request;
    const userAgent = request.get('user-agent') || '';

    response.on('finish', () => {
      const { statusCode } = response;
      const contentLength = response.get('content-length');
      this.logger.log(
        `${method} ${originalUrl} ${statusCode} ${contentLength} - ${userAgent} ${ip}`,
      );
    });
  }
}

implements 이기 때문에 use 함수를 무조건 구현해주어야 한다.

nest에서는 console.log 보다 loger.log 를 더 많이쓴다.

express 에서는 debug 라이브러리를 사용하여 추적
nest에서는 logger의 context를 이용하여 추적

app.modules.ts 에서
import { NestModule, MiddlewareConsumer } from '@nestjs/common'
import { LoggerMiddleware } from './middlewares/logger.middleware';

export class AppModule implements NestModule {
    configure(consumer: MiddlewareConsumer): any {
    consumer.apply(LoggerMiddleware).forRoutes('*');
  }
}

forRoutes(컨트롤러) 나 forRoutes(주소) 로 특정 주소에만 미들웨어 적용 가능

실무에서는 nest morgan 패키지 적용추천!