[설치]
npm i -g @nestjs/cli
-------------------------------------------------------------------------------------

[nest 프로젝트 생성]
nest new 폴더명
-------------------------------------------------------------------------------------

src 폴더 안에 대부분의 코드를 작성 할 것이다!
-------------------------------------------------------------------------------------

[nodemon 같은 기능  hot reload]
npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack

[webpack-hmr.config.js 파일 생성]
const nodeExternals = require('webpack-node-externals');
const { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');

module.exports = function (options, webpack) {
  return {
    ...options,
    entry: ['webpack/hot/poll?100', options.entry],
    externals: [
      nodeExternals({
        allowlist: ['webpack/hot/poll?100'],
      }),
    ],
    plugins: [
      ...options.plugins,
      new webpack.HotModuleReplacementPlugin(),
      new webpack.WatchIgnorePlugin({
        paths: [/\.js$/, /\.d\.ts$/],
      }),
      new RunScriptWebpackPlugin({ name: options.output.filename, autoRestart: false }),
    ],
  };
};

[src/main.ts 수정]
declare const module: any

if(module.hot) {
    module.hot.accept();
    module.hot.dispose(() => app.close());
}

[package.json 수정]
"start:dev": "nest start --watch --webpackPath webpack-hmr.config.js",
-------------------------------------------------------------------------------------

앞으로 npm run start:dev 로 하면 된다!
-------------------------------------------------------------------------------------

express 에서는 app.js 에 router를 추가하는 방식이지만
nest 에서는 module 위주의 방식

controllers : router라고 보면된다.
@Get() : GET /
------------------------------------------------------------------------------------

// 공통주소
@Controller('abc'){
    // 세부주소
    @Get() : GET /abc
}
--------------------------------------------------------------------------------

@ : annotation, decorator
이걸 붙이면 nest에서 알아서 해준다.
-> IoC (Inversion of Control) : 제어의 역전

개발자 입장에서 거부감이 있을 수도 있다.(블랙박스 : 동작 과정을 볼 수 없다.)
--------------------------------------------------------------------------------

req, res 쓰는게 안좋은 이유 : jest로 테스트할때 목킹해야한다.
Nest에는 return 만 하면 되니 함수만 목킹하면 된다.
------------------------------------------------------------------------------------

dotenv

dotenv 설치 해서 사용 할 수도있지만,
nest 에서는 module방식이므로 세팅을 더 해야한다.

[설치]
npm i --save @nestjs/config

[app.module.ts 수정]
import { ConfigModule } from '@nestjs/config'

imports에다가 ConfigModule.forRoot() 반드시 

설정이 있는 애들
forRoot()
forFeature()
...
------------------------------------------------------------------------------------
[ConfigService]
import { ConfigService } from '@nestjs/config'

[app.module.ts에서]
providers: [ConfigService] 추가

[app.service.ts에서]
import { ConfigService } from '@nestjs/config'

constructor(private readonly configService: ConfigService);
---------------------------------------------------------------------------------

[Logger Middleware]
/src/middlewares/logger.middleware.ts

import { Injectable, NestMiddleware } from '@nestjs/common'

@Injectable()
export class LoggerMiddleware implements NestMiddleware {
  private logger = new Logger('HTTP');

  use(request: Request, response: Response, next: NextFunction): void {
    const { ip, method, originalUrl } = request;
    const userAgent = request.get('user-agent') || '';

    response.on('finish', () => {
      const { statusCode } = response;
      const contentLength = response.get('content-length');
      this.logger.log(
        `${method} ${originalUrl} ${statusCode} ${contentLength} - ${userAgent} ${ip}`,
      );
    });
  }
}

implements 이기 때문에 use 함수를 무조건 구현해주어야 한다.

nest에서는 console.log 보다 logger.log 를 더 많이쓴다.

express 에서는 debug 라이브러리를 사용하여 추적
nest에서는 logger의 context를 이용하여 추적

app.modules.ts 에서
import { NestModule, MiddlewareConsumer } from '@nestjs/common'
import { LoggerMiddleware } from './middlewares/logger.middleware';

export class AppModule implements NestModule {
    configure(consumer: MiddlewareConsumer): any {
    consumer.apply(LoggerMiddleware).forRoutes('*');
  }
}

forRoutes(컨트롤러) 나 forRoutes(주소) 로 특정 주소에만 미들웨어 적용 가능

실무에서는 nest morgan 패키지 적용추천!
-----------------------------------------------------------------------------------
@Injectable()
의존성 주입

provider에 연결 되어있는 것을 보고 nest가 의존성을 생각한다.
-----------------------------------------------------------------------------------

app.module.ts 에 있는 providers 의 원형

providers: [
    {
        provide(고유한 key): AppService,
        useClass: AppService,
    }
]

providers: [
    {
        provide(고유한 key): AppService,
        useFactory: () => {

        },
    }
]

providers: [
    {
        provide(고유한 key): AppService,
        useVaue: ,
    }
]

javascript 에서는 의존성 주입을 자동으로 해주지만
nest에서는 @module 의 providers 안에 선언해주어야한다

ex)
providers: [
    {
        provide: "CUSTOM_KEY",
        useValue: "CUSTOM_VALUE,
    }
]

라고 선언했다면?

app.service.ts 에서는
constructor (
    @Inject('CUSTOM_KEY') private readonly customValue
)


----------------------------------------------------------------------------------------------------

nest는 모듈을 생성하는 명령어들을 제공한다.
nest generate module <이름> (nest g mo <이름>)

자동으로 app.module.ts 에 import 해준다.

nest g s <이름> : 서비스 생성
nest g co <이름> : 컨트롤러 생성

req, res는 express 에 결합이 된다. 안쓰는게 좋다.

@Body(): express의 body-parser 같은 역할.

DTO : data transfer object - 데이터를 전달하는 object

nest는 export default를 쓰지않는다. 항상 일반 export

interface보다는 class를 많이쓴다.

interface와 class의 차이
1. 인터페이스는 타입스크립트에만 존재하고 컴파일 끝나면 사라진다.
2. 클래스는 자바스크립트로 하고도 남아있다.
3. 클래스 자체가 타입역할을 하고 인터페이스와 비슷한 역할을 할 수 있다.
4. 자바스크립트에서도 타입검증, 유효성검사를 시행 할 수 있다.

@Query: query string에 사용된다.

@Query() query 해서 한번에 받아올건지, @Query('perPage') perPage 처럼 하나씩 받아올건지 정하면 된다.

@Param() param 도 똑같다.

변수명 길게 짓는 것이 좋은 습관

[swagger]
npm i --save @nestjs/swagger
api 버전관리 : 한번 만들어진 건 수정할 수 없고 버전을 업데이트 해야한다.

[커스텀 데코레이터]
req, res를 줄일 수 있다.
res.locals 와 같은 코드의 반복을 줄일 수 있다.
ExcutionContext: http, websocket, rpc 세가지 종류를 동시에 돌릴 수 있고 하나의 실행 컨텍스트에서 관리, 다른 서버간 정보와 소통을 관리

[인터셉터]
라우터 실행 마지막에 데이터를 한번 더 가공해주는 역할

-------------------------------------------------------------------------

[TypeORM]
sleact 강의를 수강하지 않았으므로 sleact/nest-typeorm/src/entities를 복사 붙여넣기했다.

typeorm-model-generator : 기존 테이블을 entity 로 생성해주는 라이브러리

column 들과 관계설정으로 나뉜다.
@Index: sql 성능을 높이기 위해 사용
@Entity: 테이블과 매칭
@PrimaryGeneratedColumn: PK
@Column: 컬럼 설정

관계설정은 반대에도 똑같이 만들어줘야 한다.

@OneToMany: 1 대 N 관계
@ManyToOne: N 대 1 관계

@JoinColumn 둘중에 한 곳만 작성해도 되지만, 보통 foreign key 가 있는 곳에 붙인다.

@ManyToMany 는 중간 테이블이 생기기때문에 @JoinTable 해서 중간테이블을 넣어준다. 
둘중에 한 곳에만 넣으면 된다.

@ManyToMany 설정하다 버그가 생기면 @OneToMany 2개로 나눌 수 있다.

soft delete: 가짜로 지운 척 하는 것. 나중에 복원 할 때를 대비해서
hard delete: row를 지우는 것

entitiy를 dto로 사용할 수 있다.

TypeOrmModule 에서 synchronize 는 개발환경일때만 
처음 서버 실행할때 true!
한번 만들고나서는 false로!

entities 옵션에 다 넣어줘야하지만
autoLoadEntities: true를 하면 일일이 다 import 하지않아도된다. 하지만 버그가 있을 수 있다.
autoLoadEntities는 TypeOrmModule.forFeature() 안에 있는 entities를 자동으로 읽어 연결한다.

orm이 어떤 sql로 쿼리를 날렸는지 분석을 하기 위해 logging 을 true
keepConnectionAlive를 true로 해놓지않으면 서버 재시작 시 DB연결을 끊어버린다. (hot reloading을 위해)

typeorm-seeding 은 0.2버전에서 작동
현재는 typeorm-extension 사용
db:create - db생성
db:drop - db삭제
seed - 초기 데이터 넣기
schema:sync - 테이블 생성
schema:drop - 테이블 drop

typeorm-extension은 app.module.ts의 TypeOrmModule.foorRoot 설정을 읽지못한다.
따라서, dataSource.ts 파일을 만들어야한다.


create-migration: migration 파일 생성

값들이 제대로 넘어오는 지는 dto 단에서 어느정도 다 체크가 가능하다.

에러를 throw 하면 서버가 꺼지지는 않지만 201로 정상적으로 작동한 것으로 나온다.
에러를 핸들링하기 위해 인터셉터를 사용할 수도 있지만,
exception filter를 써보자!

main.ts 에 app.useGlobalFilters() - 모든 컨트롤러에서 발생하는 http exception을 걸러준다.

service 에서 발생한 에러는 controller 까지 빼줘야한다 async-await을 컨트롤러에도 걸어주자.
promise의 then

[class-validator]
npm i class-validator

유효성검사를 dto단에서 할 수 있다.
main.ts 에서 app.useGlobalPipes(new ValidationPipe())

